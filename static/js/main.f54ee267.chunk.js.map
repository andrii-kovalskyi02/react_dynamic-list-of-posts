{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","onPostDetails","useState","isPostOpen","setIsPostOpen","postId","setPostId","handleOpenClick","useCallback","post","id","handleCloseClick","className","map","title","type","onClick","Loader","NewCommentForm","addComment","isCommentAdditionError","isCommentAdditionLoading","userName","setUserName","userEmail","setUserEmail","userComment","setUserComment","isUserRequired","setIsUserRequired","isUserEmailRequired","setIsUserEmailRequired","isUserCommentRequired","setIsUserCommentRequired","handleSubmit","event","preventDefault","normalizedUserName","trim","normalizedUserEmail","normalizedUserComment","name","email","body","handleResetClick","handleUserInput","target","value","handleUserEmailInput","handleUserCommentInput","onSubmit","htmlFor","placeholder","classNames","onChange","PostDetails","comments","hasCommentsError","removeComment","isFormActive","setIsFormActive","useEffect","shouldShowNoCommentsMessage","length","comment","Fragment","href","UserSelector","users","onUserClick","isDropdownActive","setIsDropdownActive","dropdownRef","useRef","handleOutsideClick","current","contains","document","addEventListener","removeEventListener","handleClick","userId","ref","role","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","ok","Error","status","json","client","getUserPosts","createComment","deleteComment","commentId","App","setUsers","setPosts","setPost","setComments","isLoading","setIsLoading","hasError","setHasError","setHasCommentsError","setIsCommentAdditionError","setIsCommentAdditionLoading","userList","catch","shouldShowNoPostsMessage","showUserPosts","a","userPosts","showPostComments","userPost","postComments","createdComment","currComments","filter","ReactDOM","render","getElementById"],"mappings":"uTAQaA,EAA6BC,IAAMC,MAAK,YAG9C,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,cAEA,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAAwB,MAApD,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAkBC,uBAAY,SAACC,GACnCH,EAAUG,EAAKC,IACfN,GAAc,GACdH,EAAcQ,KACb,CAACR,IAEEU,EAAmBH,uBAAY,WACnCJ,GAAc,GACdH,EAAc,QACb,CAACA,IAEJ,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGW,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGZ,EAAMa,KAAI,SAACJ,GAAD,OACT,qBAAkB,UAAQ,OAA1B,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKK,QAGR,oBAAIF,UAAU,8BAAd,SACIT,GAAcM,EAAKC,KAAOL,EAC1B,wBACEU,KAAK,SACL,UAAQ,aACRH,UAAU,iBACVI,QAAS,kBAAML,KAJjB,mBASA,wBACEI,KAAK,SACL,UAAQ,aACRH,UAAU,0BACVI,QAAS,kBAAMT,EAAgBE,IAJjC,sBAlBGA,EAAKC,kBCvCbO,G,MAAS,kBACpB,qBAAKL,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCONM,EAAkCpB,IAAMC,MAAK,YAKnD,IAJLM,EAII,EAJJA,OACAc,EAGI,EAHJA,WACAC,EAEI,EAFJA,uBACAC,EACI,EADJA,yBAEA,EAAgCnB,mBAAS,IAAzC,mBAAOoB,EAAP,KAAiBC,EAAjB,KACA,EAAkCrB,mBAAS,IAA3C,mBAAOsB,EAAP,KAAkBC,EAAlB,KACA,EAAsCvB,mBAAS,IAA/C,mBAAOwB,EAAP,KAAoBC,EAApB,KACA,EAA4CzB,oBAAS,GAArD,mBAAO0B,EAAP,KAAuBC,EAAvB,KACA,EAAsD3B,oBAAS,GAA/D,mBAAO4B,EAAP,KAA4BC,EAA5B,KACA,EAA0D7B,oBAAS,GAAnE,mBAAO8B,EAAP,KAA8BC,EAA9B,KAEMC,EAAe1B,uBAAY,SAAC2B,GAChCA,EAAMC,iBACN,IAAMC,EAAqBf,EAASgB,OAC9BC,EAAsBf,EAAUc,OAChCE,EAAwBd,EAAYY,QAErCD,GACHR,GAAkB,GAGfU,GACHR,GAAuB,GAGpBS,GACHP,GAAyB,GAGvBI,GAAsBE,GAAuBC,KAQ/CrB,EAP6B,CAC3Bd,SACAoC,KAAMnB,EACNoB,MAAOlB,EACPmB,KAAMjB,IAIRC,EAAe,OAEhB,CAACL,EAAUE,EAAWE,IAEnBkB,EAAmBpC,uBAAY,WACnCe,EAAY,IACZM,GAAkB,GAClBJ,EAAa,IACbM,GAAuB,GACvBJ,EAAe,IACfM,GAAyB,KACxB,IAEGY,EAAkBrC,uBACtB,SAAC2B,GACKP,GACFC,GAAkB,GAGpBN,EAAYY,EAAMW,OAAOC,SACxB,CAACzB,EAAUM,IAGVoB,EAAuBxC,uBAC3B,SAAC2B,GACKL,GACFC,GAAuB,GAGzBN,EAAaU,EAAMW,OAAOC,SACzB,CAACvB,EAAWM,IAGXmB,EAAyBzC,uBAC7B,SAAC2B,GACKH,GACFC,GAAyB,GAG3BN,EAAeQ,EAAMW,OAAOC,SAC3B,CAACrB,EAAaM,IAGnB,OACE,uBAAM,UAAQ,iBAAiBkB,SAAUhB,EAAzC,UACE,sBAAKtB,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQuC,QAAQ,sBAAjC,yBAIA,sBAAKvC,UAAU,yCAAf,UACE,uBACEG,KAAK,OACL0B,KAAK,OACL/B,GAAG,sBACH0C,YAAY,eACZxC,UAAWyC,IAAW,QAAS,CAAE,YAAazB,IAC9CmB,MAAOzB,EACPgC,SAAUT,IAGZ,sBAAMjC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdgB,GACC,qCACE,sBACEhB,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,kCAGf,mBAAGA,UAAU,iBAAiB,UAAQ,eAAtC,uCAQR,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQuC,QAAQ,uBAAjC,0BAIA,sBAAKvC,UAAU,yCAAf,UACE,uBACEG,KAAK,OACL0B,KAAK,QACL/B,GAAG,uBACH0C,YAAY,iBACZxC,UAAWyC,IAAW,QAAS,CAC7B,YAAavB,IAEfiB,MAAOvB,EACP8B,SAAUN,IAGZ,sBAAMpC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGdkB,GACC,qCACE,sBACElB,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,kCAGf,mBAAGA,UAAU,iBAAiB,UAAQ,eAAtC,wCAQR,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQuC,QAAQ,eAAjC,0BAIA,qBAAKvC,UAAU,UAAf,SACE,0BACEF,GAAG,eACH+B,KAAK,OACLW,YAAY,oBACZxC,UAAWyC,IAAW,WAAY,CAChC,YAAarB,IAEfe,MAAOrB,EACP4B,SAAUL,MAIbjB,GACC,mBAAGpB,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEG,KAAK,SACLH,UAAWyC,IAAW,iBAAkB,CACtC,aAAchC,IAHlB,mBAUF,qBAAKT,UAAU,UAAf,SAEE,wBACEG,KAAK,QACLH,UAAU,0BACVI,QAAS4B,EAHX,wBAWHxB,GACC,qBAAKR,UAAU,yBAAyB,UAAQ,gBAAhD,wCC/MK2C,EAA+BzD,IAAMC,MAAK,YAQhD,IAPLU,EAOI,EAPJA,KACA+C,EAMI,EANJA,SACAC,EAKI,EALJA,iBACAC,EAII,EAJJA,cACAvC,EAGI,EAHJA,WACAC,EAEI,EAFJA,uBACAC,EACI,EADJA,yBAEA,EAAwCnB,oBAAS,GAAjD,mBAAOyD,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACR,OAAO,WACLD,GAAgB,MAEjB,CAACnD,IAEJ,IAAMqD,GAA+BL,GAChCD,IAAaA,EAASO,OAE3B,OACE,qBAAKnD,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOH,EAAKC,GADZ,aACmBD,EAAKK,SAGxB,mBAAG,UAAQ,WAAX,SACGL,EAAKkC,UAIV,sBAAK/B,UAAU,QAAf,UACiB,OAAb4C,IAAsBC,GACtB,cAAC,EAAD,IAGDA,GACC,qBAAK7C,UAAU,yBAAyB,UAAQ,gBAAhD,kCAKDkD,GACC,mBAAGlD,UAAU,aAAa,UAAQ,oBAAlC,6BAKA4C,GAAYA,EAASO,OAAS,GAC9B,qCACE,mBAAGnD,UAAU,aAAb,uBAEA,yBAASA,UAAU,mBAAmB,UAAQ,UAA9C,SACG4C,EAAS3C,KAAI,SAAAmD,GAAO,OACnB,eAAC,IAAMC,SAAP,WACE,sBAAKrD,UAAU,iBAAf,UACE,mBACEsD,KAAI,iBAAYF,EAAQtB,OACxB,UAAQ,gBAFV,SAIGsB,EAAQvB,OAEX,wBACE,UAAQ,gBACR1B,KAAK,SACLH,UAAU,kBACV,aAAW,SACXI,QAAS,kBAAM0C,EAAcM,EAAQtD,KALvC,+BAWF,qBAAKE,UAAU,eAAe,UAAQ,cAAtC,SACGoD,EAAQrB,SApBQqB,EAAQtD,gBA8BrCiD,GACA,wBACE,UAAQ,qBACR5C,KAAK,SACLH,UAAU,iBACVI,QAAS,kBAAM4C,GAAgB,IAJjC,6BAUDD,GACC,cAACzC,EAAD,CACEb,OAAQI,EAAKC,GACbS,WAAYA,EACZC,uBAAwBA,EACxBC,yBAA0BA,YCxGzB8C,EAAgCrE,IAAMC,MAAK,YAGjD,IAFLqE,EAEI,EAFJA,MACAC,EACI,EADJA,YAEA,EAAgCnE,mBAAS,iBAAzC,mBAAOoB,EAAP,KAAiBC,EAAjB,KACA,EAAgDrB,oBAAS,GAAzD,mBAAOoE,EAAP,KAAyBC,EAAzB,KACMC,EAAcC,iBAAuB,MAE3CZ,qBAAU,WACR,IAAMa,EAAqB,SAACvC,GACKqC,EAAYG,UACvCH,EAAYG,QAAQC,SAASzC,EAAMW,SAGrCyB,GAAoB,IAMxB,OAFAM,SAASC,iBAAiB,QAASJ,GAE5B,WACLG,SAASE,oBAAoB,QAASL,MAEvC,IAEH,IAAMM,EAAcxE,uBAAY,SAACyE,EAAQxC,GACvClB,EAAYkB,GACZ4B,EAAYY,GACZV,GAAoB,KACnB,CAACjD,EAAU+C,IAEd,OACE,sBACE,UAAQ,eACRzD,UAAWyC,IAAW,WAAY,CAChC,YAAaiB,IAEfY,IAAKV,EALP,UAOE,qBAAK5D,UAAU,mBAAf,SACE,yBACEG,KAAK,SACLH,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdI,QAAS,kBAAMuD,GAAqBD,IALtC,UAOE,+BAAOhD,IAEP,sBAAMV,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBF,GAAG,gBAAgByE,KAAK,OAAvD,SACE,qBAAKvE,UAAU,mBAAf,SACGwD,EAAMvD,KAAI,gBAAGH,EAAH,EAAGA,GAAI+B,EAAP,EAAOA,KAAP,OACT,mBAEEyB,KAAI,gBAAWxD,GACfE,UAAWyC,IAAW,gBAAiB,CACrC,YAAaZ,IAASnB,IAExBN,QAAS,kBAAMgE,EAAYtE,EAAI+B,IANjC,SAQGA,GAPI/B,gBCvEb0E,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADI,KAEVC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQnD,KAAOoD,KAAKC,UAAUH,GAC9BC,EAAQG,QAAU,CAChB,eAAgB,oCAKbZ,EAAK,KACTa,MAAK,kBAAMC,MAAMf,EAAWO,EAAKG,MACjCI,MAAK,SAAAE,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,sCAAyCF,EAASG,SAG1D,OAAOH,EAASI,UAIf,IAAMC,EACN,SAAId,GAAJ,OAAoBD,EAAWC,IADzBc,EAEL,SAAId,EAAaE,GAAjB,OAAuCH,EAAWC,EAAK,OAAQE,IAF1DY,EAIH,SAACd,GAAD,OAAiBD,EAAQC,EAAK,WCpC3Be,EAAe,SAACzB,GAC3B,OAAOwB,EAAA,wBAAoCxB,KAOhC0B,EAAgB,SAAC3C,GAC5B,OAAOyC,EAAqB,YAAazC,IAG9B4C,EAAgB,SAACC,GAC5B,OAAOJ,EAAA,oBAA2BI,KCDvBC,EAAgB,WAC3B,MAA0B5G,mBAAiB,IAA3C,mBAAOkE,EAAP,KAAc2C,EAAd,KACA,EAA0B7G,mBAAwB,MAAlD,mBAAOF,EAAP,KAAcgH,EAAd,KACA,EAAwB9G,mBAAsB,MAA9C,mBAAOO,EAAP,KAAawG,EAAb,KACA,EAAgC/G,mBAA2B,MAA3D,mBAAOsD,EAAP,KAAiB0D,EAAjB,KACA,EAAkChH,oBAAS,GAA3C,mBAAOiH,EAAP,KAAkBC,EAAlB,KACA,EAAgClH,oBAAS,GAAzC,mBAAOmH,EAAP,KAAiBC,EAAjB,KACA,EAAgDpH,oBAAS,GAAzD,mBAAOuD,EAAP,KAAyB8D,EAAzB,KACA,EAA4DrH,oBAAS,GAArE,mBAAOkB,EAAP,KAA+BoG,EAA/B,KACA,EAGItH,oBAAS,GAHb,mBACEmB,EADF,KAEEoG,EAFF,KAKA5D,qBAAU,WD7BH4C,EAAmB,UC+BrBP,MAAK,SAAAwB,GAAQ,OAAIX,EAASW,MAC1BC,OAAM,kBAAML,GAAY,QAC1B,IAEH,IAAMM,GAA4BT,IAC5BE,GAAYrH,IAAUA,EAAM+D,OAE5B8D,EAAgBrH,sBAAW,uCAAC,WAAOyE,GAAP,eAAA6C,EAAA,6DAChCb,EAAQ,MACRD,EAAS,IACTI,GAAa,GAHmB,kBAKNV,EAAazB,GALP,OAKxB8C,EALwB,OAO9Bf,EAASe,GAPqB,kDAS9BT,GAAY,GATkB,yBAW9BF,GAAa,GAXiB,6EAAD,sDAa9B,IAEGY,EAAmBxH,sBAAW,uCAAC,WAAOyH,GAAP,eAAAH,EAAA,yDAC9BG,EAD8B,uBAEjChB,EAAQ,MAFyB,iCAOnCA,EAAQgB,GACRf,EAAY,MACZK,GAAoB,GATe,kBD9CPlH,ECyDiB4H,EAASvH,GDxDjD+F,EAAA,2BAA0CpG,IC6CZ,OAW3B6H,EAX2B,OAajChB,EAAYgB,GAbqB,kDAejCX,GAAoB,GAfa,kCD9CR,IAAClH,IC8CO,qBAAD,sDAiBjC,IAEGc,GAAaX,sBAAW,uCAAC,WAAOwD,GAAP,eAAA8D,EAAA,6DAC7BL,GAA4B,GADC,kBAIEd,EAAc3C,GAJhB,OAIrBmE,EAJqB,OAM3BjB,GAAY,SAAAkB,GAAY,4BAClBA,GAAgB,IADE,CAEtBD,OARyB,gDAW3BX,GAA0B,GAXC,yBAa3BC,GAA4B,GAbD,4EAAD,sDAe3B,IAEG/D,GAAgBlD,sBAAW,uCAAC,WAAOqG,GAAP,SAAAiB,EAAA,+EAExBlB,EAAcC,GAFU,OAG9BK,GAAY,SAAAkB,GAAY,OACrBA,GAAgB,IAAIC,QAAO,SAAArE,GAAO,OAAIA,EAAQtD,KAAOmG,QAJ1B,+CAO9BU,GAAoB,GAPU,wDAAD,sDAS9B,IAEH,OACE,sBAAM3G,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAACuD,EAAD,CACEC,MAAOA,EACPC,YAAawD,MAIjB,sBAAKjH,UAAU,QAAQ,UAAQ,cAA/B,WACIZ,GACA,mBAAG,UAAQ,iBAAX,8BAKDmH,GACC,cAAC,EAAD,IAGDE,GACC,qBACEzG,UAAU,yBACV,UAAQ,oBAFV,mCAQDgH,GACC,qBAAKhH,UAAU,0BAA0B,UAAQ,aAAjD,0BAKAZ,GAASA,EAAM+D,OAAS,GACxB,cAAClE,EAAD,CACEG,MAAOA,EACPC,cAAe+H,YAOzB,qBACE,UAAQ,UACRpH,UAAWyC,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiB5C,IAPvB,SAUGA,GACC,qBAAKG,UAAU,gCAAf,SACE,cAAC2C,EAAD,CACE9C,KAAMA,EACN+C,SAAUA,EACVC,iBAAkBA,EAClBC,cAAeA,GACfvC,WAAYA,GACZC,uBAAwBA,EACxBC,yBAA0BA,gBC1K5CiH,IAASC,OACP,cAAC,EAAD,IACA1D,SAAS2D,eAAe,W","file":"static/js/main.f54ee267.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  onPostDetails: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  onPostDetails,\n}) => {\n  const [isPostOpen, setIsPostOpen] = useState(false);\n  const [postId, setPostId] = useState<number | null>(null);\n\n  const handleOpenClick = useCallback((post: Post) => {\n    setPostId(post.id);\n    setIsPostOpen(true);\n    onPostDetails(post);\n  }, [onPostDetails]);\n\n  const handleCloseClick = useCallback(() => {\n    setIsPostOpen(false);\n    onPostDetails(null);\n  }, [onPostDetails]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {(isPostOpen && post.id === postId) ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => handleCloseClick()}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => handleOpenClick(post)}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  addComment: (comment: CommentData) => void;\n  isCommentAdditionError: boolean;\n  isCommentAdditionLoading: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  postId,\n  addComment,\n  isCommentAdditionError,\n  isCommentAdditionLoading,\n}) => {\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userComment, setUserComment] = useState('');\n  const [isUserRequired, setIsUserRequired] = useState(false);\n  const [isUserEmailRequired, setIsUserEmailRequired] = useState(false);\n  const [isUserCommentRequired, setIsUserCommentRequired] = useState(false);\n\n  const handleSubmit = useCallback((event: React.FormEvent) => {\n    event.preventDefault();\n    const normalizedUserName = userName.trim();\n    const normalizedUserEmail = userEmail.trim();\n    const normalizedUserComment = userComment.trim();\n\n    if (!normalizedUserName) {\n      setIsUserRequired(true);\n    }\n\n    if (!normalizedUserEmail) {\n      setIsUserEmailRequired(true);\n    }\n\n    if (!normalizedUserComment) {\n      setIsUserCommentRequired(true);\n    }\n\n    if (normalizedUserName && normalizedUserEmail && normalizedUserComment) {\n      const comment: CommentData = {\n        postId,\n        name: userName,\n        email: userEmail,\n        body: userComment,\n      };\n\n      addComment(comment);\n      setUserComment('');\n    }\n  }, [userName, userEmail, userComment]);\n\n  const handleResetClick = useCallback(() => {\n    setUserName('');\n    setIsUserRequired(false);\n    setUserEmail('');\n    setIsUserEmailRequired(false);\n    setUserComment('');\n    setIsUserCommentRequired(false);\n  }, []);\n\n  const handleUserInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isUserRequired) {\n        setIsUserRequired(false);\n      }\n\n      setUserName(event.target.value);\n    }, [userName, isUserRequired],\n  );\n\n  const handleUserEmailInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isUserEmailRequired) {\n        setIsUserEmailRequired(false);\n      }\n\n      setUserEmail(event.target.value);\n    }, [userEmail, isUserEmailRequired],\n  );\n\n  const handleUserCommentInput = useCallback(\n    (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      if (isUserCommentRequired) {\n        setIsUserCommentRequired(false);\n      }\n\n      setUserComment(event.target.value);\n    }, [userComment, isUserCommentRequired],\n  );\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isUserRequired })}\n            value={userName}\n            onChange={handleUserInput}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isUserRequired && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Name is required\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isUserEmailRequired,\n            })}\n            value={userEmail}\n            onChange={handleUserEmailInput}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isUserEmailRequired && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Email is required\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isUserCommentRequired,\n            })}\n            value={userComment}\n            onChange={handleUserCommentInput}\n          />\n        </div>\n\n        {isUserCommentRequired && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isCommentAdditionLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetClick}\n          >\n            Clear\n          </button>\n        </div>\n\n      </div>\n\n      {isCommentAdditionError && (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          Something went wrong\n        </div>\n      )}\n    </form>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n  comments: Comment[] | null;\n  hasCommentsError: boolean;\n  removeComment: (commentId: number) => void;\n  addComment: (comment: CommentData) => void;\n  isCommentAdditionError: boolean;\n  isCommentAdditionLoading: boolean;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  post,\n  comments,\n  hasCommentsError,\n  removeComment,\n  addComment,\n  isCommentAdditionError,\n  isCommentAdditionLoading,\n}) => {\n  const [isFormActive, setIsFormActive] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      setIsFormActive(false);\n    };\n  }, [post]);\n\n  const shouldShowNoCommentsMessage = !hasCommentsError\n    && comments && !comments.length;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {(comments === null && !hasCommentsError) && (\n            <Loader />\n          )}\n\n          {hasCommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {shouldShowNoCommentsMessage && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(comments && comments.length > 0) && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              <article className=\"message is-small\" data-cy=\"Comment\">\n                {comments.map(comment => (\n                  <React.Fragment key={comment.id}>\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => removeComment(comment.id)}\n                      >\n                        Delete comment\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </React.Fragment>\n                ))}\n              </article>\n\n            </>\n          )}\n        </div>\n\n        {!isFormActive && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsFormActive(true)}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {isFormActive && (\n          <NewCommentForm\n            postId={post.id}\n            addComment={addComment}\n            isCommentAdditionError={isCommentAdditionError}\n            isCommentAdditionLoading={isCommentAdditionLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onUserClick: (userId: number) => void;\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  onUserClick,\n}) => {\n  const [userName, setUserName] = useState('Choose a user');\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleOutsideClick = (event: MouseEvent) => {\n      const isOutsideDropdownClick = dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node);\n\n      if (isOutsideDropdownClick) {\n        setIsDropdownActive(false);\n      }\n    };\n\n    document.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      document.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  const handleClick = useCallback((userId, name) => {\n    setUserName(name);\n    onUserClick(userId);\n    setIsDropdownActive(false);\n  }, [userName, onUserClick]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n      ref={dropdownRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(!isDropdownActive)}\n        >\n          <span>{userName}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(({ id, name }) => (\n            <a\n              key={id}\n              href={`#user-${id}`}\n              className={classNames('dropdown-item', {\n                'is-active': name === userName,\n              })}\n              onClick={() => handleClick(id, name)}\n            >\n              {name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import { CommentData } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`Request failed with status: ${response.status}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: CommentData) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: CommentData) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport {\n  createComment,\n  deleteComment,\n  getPostComments,\n  getUserPosts,\n  getUsers,\n} from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Loader } from './components/Loader';\nimport { Comment, CommentData } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [hasCommentsError, setHasCommentsError] = useState(false);\n  const [isCommentAdditionError, setIsCommentAdditionError] = useState(false);\n  const [\n    isCommentAdditionLoading,\n    setIsCommentAdditionLoading,\n  ] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(userList => setUsers(userList))\n      .catch(() => setHasError(true));\n  }, []);\n\n  const shouldShowNoPostsMessage = !isLoading\n    && !hasError && posts && !posts.length;\n\n  const showUserPosts = useCallback(async (userId: number) => {\n    setPost(null);\n    setPosts([]);\n    setIsLoading(true);\n    try {\n      const userPosts = await getUserPosts(userId);\n\n      setPosts(userPosts);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const showPostComments = useCallback(async (userPost: Post | null) => {\n    if (!userPost) {\n      setPost(null);\n\n      return;\n    }\n\n    setPost(userPost);\n    setComments(null);\n    setHasCommentsError(false);\n    try {\n      const postComments = await getPostComments(userPost.id);\n\n      setComments(postComments);\n    } catch {\n      setHasCommentsError(true);\n    }\n  }, []);\n\n  const addComment = useCallback(async (comment: CommentData) => {\n    setIsCommentAdditionLoading(true);\n\n    try {\n      const createdComment = await createComment(comment);\n\n      setComments(currComments => ([\n        ...(currComments || []),\n        createdComment,\n      ]) as Comment[]);\n    } catch {\n      setIsCommentAdditionError(true);\n    } finally {\n      setIsCommentAdditionLoading(false);\n    }\n  }, []);\n\n  const removeComment = useCallback(async (commentId: number) => {\n    try {\n      await deleteComment(commentId);\n      setComments(currComments => (\n        (currComments || []).filter(comment => comment.id !== commentId)\n      ));\n    } catch {\n      setHasCommentsError(true);\n    }\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onUserClick={showUserPosts}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!posts && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {shouldShowNoPostsMessage && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts && posts.length > 0) && (\n                  <PostsList\n                    posts={posts}\n                    onPostDetails={showPostComments}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': post },\n            )}\n          >\n            {post && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={post}\n                  comments={comments}\n                  hasCommentsError={hasCommentsError}\n                  removeComment={removeComment}\n                  addComment={addComment}\n                  isCommentAdditionError={isCommentAdditionError}\n                  isCommentAdditionLoading={isCommentAdditionLoading}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}